datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int      @id @default(autoincrement()) // Auto-incrementing integer ID for User
  email    String   @unique
  username String?  // Optional field for username

  password String
  profile  Profile?

  feeds    Feed[]   // Relation to Feed
  comments Comment[] // Relation to Comment

  @@map("users")
}

model Profile {
  profileId          Int      @id @default(autoincrement()) // Auto-incrementing integer profileId
  userId             Int      @unique // References User's auto-incrementing ID
  fullName           String
  age                Int?
  dateOfBirth        DateTime?
  description        String?
  businessCategory   String?
  investmentCategory String?
  contactNumber      String?
  location           String?
  profilePictureUrl  String?
  socialLinks        String?
  aadharNumber       String?
  isProfileCompleted Boolean  @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Feed {
  id          Int      @id @default(autoincrement()) // Auto-incrementing ID
  userId      Int      // Foreign key referencing User
  content     String?  // Text content of the post
  videoUrl    String?  // URL of the uploaded video
  isPrivate   Boolean  @default(false) // Privacy status of the post
  likes       Int      @default(0) // Count of likes
  dislikes    Int      @default(0) // Count of dislikes
  comments    Comment[] // Relation to Comment
  createdAt   DateTime  @default(now()) // Timestamp for creation
  updatedAt   DateTime  @updatedAt // Timestamp for last update

  user        User      @relation(fields: [userId], references: [id])

  @@map("feeds")
}

model Comment {
  id          Int      @id @default(autoincrement()) // Auto-incrementing ID
  feedId      Int      // Foreign key referencing Feed
  userId      Int      // Foreign key referencing User
  content     String   // Comment content
  createdAt   DateTime  @default(now()) // Timestamp for creation

  feed        Feed      @relation(fields: [feedId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("comments")
}
